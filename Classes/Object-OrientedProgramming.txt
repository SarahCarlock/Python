Introduction to Classes
Object-Oriented Programming
3 min

A class instance is also called an object. The pattern of defining
Preview: Docs Loading link description
classes
and creating objects to represent the responsibilities of a program is known as
Preview: Docs Object-oriented programming (OOP) is a software development paradigm which encourages sculpting desired entities with properties and methods in named classes to create applications.
Object Oriented Programming
or OOP.

Instantiation takes a class and turns it into an object, the
Preview: Docs Loading link description
type()
function does the opposite of that. When called with an object, it returns the class that the object is an instance of.

print(type(cool_instance))
# prints "<class '__main__.CoolClass'>"

to Clipboard

We then print out the type() of cool_instance and it shows us that this object is of type __main__.CoolClass.

In Python __main__ means “this current file that we’re running” and so one could read the output from type() to mean “the class CoolClass that was defined here, in the script you’re currently running.”
Instructions

    Checkpoint 1 Passed

    1.

    In script.py we see facade_1 from last exercise. Try calling type() on facade_1 and saving it to the variable facade_1_type.

Checkpoint 2 Passed

2.

Print out facade_1_type.


Example
class Facade:
  pass

facade_1 = Facade()

facade_1_type = type(facade_1)
print(facade_1_type)