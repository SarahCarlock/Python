Here we go!
Cheat sheet = https://www.codecademy.com/learn/learn-python-3/modules/learn-python3-hello-world/cheatsheet

my_name = "Kiki"
print("Hello and welcome " + my_name + "!")

Python interprets anything after a # as a comment.
Comments can:

    Provide context for why something is written the way it is:

# This variable will be used to count the number of times anyone tweets the word persnickety
persnickety_count = 0

    Help other people reading the code understand it faster:

# This code will calculate the likelihood that it will rain tomorrow
complicated_rain_calculation_for_tomorrow()

    Ignore a line of code and see how a program will run without it:

# useful_value = old_sloppy_code()
useful_value = new_clean_code()
print("----") to show on console
Output= the printed words that apear as a result of print()

Python refers to these mistakes as errors and will point to the location where an error occurred with a ^ character.

Two common errors that we encounter while writing Python are SyntaxError and NameError.

    SyntaxError means there is something wrong with the way your program is written — punctuation that does not belong, a command where it is not expected, or a missing parenthesis can all trigger a SyntaxError.

    A NameError occurs when the Python interpreter sees a word it does not recognize. Code that contains something that looks like a variable but was never defined will throw a NameError.

A floating-point number, or a float, is a decimal number.
Exponents in mathematical notation listed as **

The modulo operator is indicated by % and gives the remainder of a division calculation. 

CONCATENATION
birthday_string = "I am "
age = 10
birthday_string_2 = " years old today!"

# Concatenating an integer with strings is possible if we turn the integer into a string first
full_birthday_string = birthday_string + str(age) + birthday_string_2

# Prints "I am 10 years old today!"
print(full_birthday_string)

# If we just want to print an integer 
# we can pass a variable as an argument to 
# print() regardless of whether 
# it is a string.

# This also prints "I am 10 years old today!"
print(birthday_string, age, birthday_string_2)

str() can convert to a string

string1 = "The wind, "
string2 = "which had hitherto carried us along with amazing rapidity, "
string3 = "sank at sunset to a light breeze; "
string4 = "the soft air just ruffled the water and "
string5 = "caused a pleasant motion among the trees as we approached the shore, "
string6 = "from which it wafted the most delightful scent of flowers and hay."

# Define message below:
message = string1+string2+string3+string4+string5+string6

print(message)

PLUS EQUALS
# First we have a variable with a number saved
number_of_miles_hiked = 12

# Then we need to update that variable
# Let's say we hike another two miles today
number_of_miles_hiked += 2

# The new value is the old value
# Plus the number after the plus-equals
print(number_of_miles_hiked)
# Prints 14

total_price = 0

new_sneakers = 50.00

total_price += new_sneakers

nice_sweater = 39.00
fun_books = 20.00
# Update total_price here:
total_price += nice_sweater
total_price += fun_books
print("The total price is", total_price)

MULTI LINE STRINGS
three quote-marks (""" or ''') instead of one, we tell the program that the string doesn’t end until the next triple-quote. This method is useful if the string being defined contains a lot of quotation marks and we want to be sure we don’t close it prematurely.

leaves_of_grass = """
Poets to come! orators, singers, musicians to come!
Not to-day is to justify me and answer what I am for,
But you, a new brood, native, athletic, continental, greater than
  before known,
Arouse! for you must justify me.
"""

INPUT
input() function requires a prompt message, which it will print out for the user before they enter the new information. 

