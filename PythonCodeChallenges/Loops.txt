Function and Loop Syntax

As a refresher, function syntax looks like this:

def some_function(some_input1, some_input2):
  … do something with the inputs …
  return output

For example, a function that prints all odd numbers in a list would look like this:

def odd_nums(my_list):
  for item in my_list:
    if item % 2 == 1:
      print(item)

And this would produce output like:

>>> odd_nums([4, 7, 9, 10, 13])
7
9
13

Challenges
1. Divisible by 10
#Write your function here
def divisible_by_ten(nums):
  count = 0
  for x in nums:
    if x % 10 == 0:
      count = count + 1
  return count


#Uncomment the line below when your function is done
print(divisible_by_ten([20, 25, 30, 35, 40]))

OR 

def divisible_by_ten(nums):
  count = 0
  for number in nums:
    if (number % 10 == 0):
      count += 1
  return count

2. Greetings
#Write your function here
def add_greetings(names):
  greet_um = []
  for name in names:
    greet_um.append("Hello, " + name)
  return greet_um
  

#Uncomment the line below when your function is done
print(add_greetings(["Owen", "Max", "Sophie"]))

3. Delete Starting Even numbers
#Write your function here
def delete_starting_evens(my_list):
  while (len(my_list) > 0 and my_list[0] % 2 ==0):
    my_list = my_list[1:]
  return my_list

#Uncomment the lines below when your function is done
print(delete_starting_evens([4, 8, 10, 11, 12, 15]))
print(delete_starting_evens([4, 8, 10]))

4. Odd indices
#Write your function here
def odd_indices(my_list):
  new_list = []
  for index in range(1, len(my_list), 2):
    new_list.append(my_list[index])
  return new_list 

#Uncomment the line below when your function is done
print(odd_indices([4, 3, 7, 10, 11, -2]))

OR 

In our solution, we iterate through a range of values. The function range(1, len(my_list), 2) returns a list of numbers starting at 1, ending at the length of len, and incrementing by 2. This causes the loop to iterate through every odd number until the last index of our list of numbers. Using this, we can simply append the element at whatever index we are at since we know that using our range we will be iterating through only odd indices. 

5. Exponents
#Write your function here
def exponents(bases, powers):
  new_values = []
  for base in bases:
    for power in powers:
      new_values.append(base ** power)
  return new_values

#Uncomment the line below when your function is done
print(exponents([2, 3, 4], [1, 2, 3]))

# Write your sum_even_keys function here:
def sum_even_keys(my_dictionary):
  even_sum = 0
  for key in my_dictionary.keys():
    if key%2 == 0:
      even_sum += my_dictionary[key]
  return even_sum


# Uncomment these function calls to test your  function:
print(sum_even_keys({1:5, 2:2, 3:3}))
# should print 2
print(sum_even_keys({10:1, 100:2, 1000:3}))
# should print 6

Here is one solution:

def sum_even_keys(my_dictionary):
  total = 0
  for key in my_dictionary.keys():
    if key%2 == 0:
      total += my_dictionary[key]
  return total

Similar to the previous problem, we are iterating through our dictionary, except this time we are iterating through the keys instead of the values. In order to get the keys we use the keys() function and to get the value of a key we can use brackets. To test if the key is even we use the modulus operator and test if the remainder is 0 when dividing by 2.
3. Add Ten

Let’s loop through the keys again, but this time let’s modify the values within the dictionary. Our function should add 10 to every value in the dictionary and return the modified dictionary. Here is what we need to do:

    Define the function to accept one parameter for our dictionary
    Loop through every key in the dictionary
    Retrieve the value using the key and add 10 to it. Make sure to re-save the new value to the original key.
    After the loop, return the modified dictionary

Coding question
Questions

Create a function named add_ten that takes a dictionary with integer values named my_dictionary as a parameter. The function should add 10 to every value in my_dictionary and return my_dictionary

# Write your add_ten function here:
def add_ten(my_dictionary):
  for key in my_dictionary.keys():
    my_dictionary[key] += 10
  return my_dictionary

# Uncomment these function calls to test your  function:
print(add_ten({1:5, 2:2, 3:3}))
# should print {1:15, 2:12, 3:13}
print(add_ten({10:1, 100:2, 1000:3}))
# should print {10:11, 100:12, 1000:13}

Here is how we did it:

def add_ten(my_dictionary):
  for key in my_dictionary.keys():
    my_dictionary[key] += 10
  return my_dictionary

We use a for loop to iterate through each key and we access the value using the key. After accessing it, we overwrite the value with the value plus 10. Finally, we return the modified dictionary.

4. Values That Are Keys

We are making a program that will create a family tree. Using a dictionary, we want to return a list of all the children who are also parents of other children. Using dictionaries we can consider those people to be values which are also keys in our dictionary of family data. Here is what we need to do:

    Define the function to accept one parameter for our dictionary
    Create an empty list to hold the values we find
    Loop through every value in the dictionary
    Inside the loop, test if the current value is a key in the dictionary. If it is then append it to the list of values we found
    After the loop, return the list of values which are also keys

Coding question
Questions

Create a function named values_that_are_keys that takes a dictionary named my_dictionary as a parameter. This function should return a list of all values in the dictionary that are also keys.

# Write your values_that_are_keys function here:
def values_that_are_keys(my_dictionary):
  my_list = []
  for value in my_dictionary.values():
    for key in my_dictionary.keys():
      if value == key:
        my_list.append(value)
  return my_list
# Uncomment these function calls to test your  function:
print(values_that_are_keys({1:100, 2:1, 3:4, 4:10}))
# should print [1, 4]
print(values_that_are_keys({"a":"apple", "b":"a", "c":100}))
# should print ["a"]

Here is this solution:

def values_that_are_keys(my_dictionary):
  value_keys = []
  for value in my_dictionary.values():
    if value in my_dictionary:
      value_keys.append(value)
  return value_keys

For this solution, we iterate through every value within the dictionary. In order to check if it is also a key, we can use the in keyword. This checks the value against all of the keys in the dictionary to see if it exists as a key as well. If it does, then we append it to our list of values which are also keys.
5. Largest Value

For the last challenge, we are going to create a function that is able to find the maximum value in the dictionary and return the associated key. This is a twist on the max algorithm since it is using a dictionary rather than a list. These are the steps:

    Define the function to accept one parameter for our dictionary
    Initialize the starting key to a very low number
    Initialize the starting value to a very low number
    Iterate through the dictionary’s key/value pairs.
    Inside the loop, if the current value is larger than the current largest value, replace the largest key and largest value with the current ones you are looking at
    Once you are done iterating through all key/value pairs, return the key which has the largest value

Coding question
Questions

Write a function named max_key that takes a dictionary named my_dictionary as a parameter. The function should return the key associated with the largest value in the dictionary.

